{"version":3,"sources":["Modal.jsx","Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Modal","props","state","userName","handleChange","bind","event","target","value","type","checked","name","this","setState","console","log","style","fontWeight","fontSize","textTransform","color","role","aria-label","className","htmlFor","padding","border","autoFocus","onChange","id","placeholder","data-toggle","data-target","backgroundColor","margin","borderRadius","aria-hidden","marginLeft","tabIndex","aria-labelledby","data-dismiss","Component","Form","numOne","numTwo","handleSubmit","addNum","alert","preventDefault","Number","numInput","display","onSubmit","flexDirection","alignItems","justifyContent","background","width","boxShadow","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ca55e1f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Modal.css';\r\n\r\nexport class Modal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = event.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        this.setState({ [name]: value });\r\n        console.log(`${name} element was clicked and this is the value ${value}`)\r\n    }\r\n\r\n    render() {\r\n        const btnStyle = {\r\n            color: '#fff',\r\n            backgroundColor: '#000',\r\n            padding: '.5rem 2rem',\r\n            margin: '.5rem 0 2.4rem 0',\r\n            borderRadius: 0,\r\n            fontWeight: 'inherit',\r\n        }\r\n        const nameInput = {\r\n            padding: '.4rem 1.6rem',\r\n            border: '1px solid #000',\r\n            fontWeight: 'inherit',\r\n        }\r\n\r\n        const h2 = {\r\n            fontWeight: 600,\r\n            fontSize: '1.2rem',\r\n            textTransform: 'uppercase',\r\n            color: '#fff',\r\n        }\r\n\r\n        const h3 = {\r\n            fontWeight: 800,\r\n            fontSize: '1.5rem',\r\n            textTransform: 'uppercase',\r\n            color: '#000',\r\n        }\r\n        const marginLeft = {\r\n            marginLeft: '.5rem',\r\n        }\r\n\r\n        const modalBtn = {\r\n                color: '#fff',\r\n            backgroundColor: '#DE2949',\r\n            padding: '.5rem 2rem',\r\n            margin: '2rem 0 1rem 0',\r\n            borderRadius: 0,\r\n            fontWeight: 'inherit', \r\n        }\r\n        return (\r\n            <div>\r\n\r\n                <h2 style={h2}>\r\n                    Hello Howdy <span role=\"img\" aria-label=\"emoji\">üê±‚Äçüë§</span>\r\n                </h2>\r\n                 <h2 style={h3}>\r\n                   Let's add some shit!\r\n                </h2>\r\n                <div className=\"spinner-grow text-primary\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <div className=\"spinner-grow text-secondary\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <div className=\"spinner-grow text-success\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <div className=\"spinner-grow text-danger\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <div className=\"spinner-grow text-warning\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <div className=\"spinner-grow text-info\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <div className=\"spinner-grow text-light\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"userName\">\r\n                        <input style={nameInput} autoFocus type=\"text\" value={this.state.userName} onChange={this.handleChange} id=\"userName\" name=\"userName\"\r\n                            placeholder=\"Enter your name...\" />\r\n                    </label>\r\n                </div>\r\n                <button  type=\"button\" className=\"btn\" data-toggle=\"modal\"\r\n                    data-target=\"#exampleModal\" style={btnStyle}>\r\n                        Click here\r\n                    <span className=\"spinner-grow my-spinner spinner-grow-sm\" role=\"status\" aria-hidden=\"true\" style={marginLeft}></span> \r\n                </button>\r\n                <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\"\r\n                    aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\" role=\"document\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <span> <i className=\"fas  fa-user\"></i> </span>\r\n                                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                    <span aria-hidden=\"true\">&times;</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <h3>Welcome <strong>{this.state.userName + ' üòé'}</strong>, let's calculate some shit! </h3>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn\" style={modalBtn} data-dismiss=\"modal\">Close</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal\r\n","import React, { Component } from 'react';\r\nimport Modal from './Modal';\r\nimport './Modal.css';\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: '',\r\n            numOne: '',\r\n            numTwo: '',\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.addNum = this.addNum.bind(this);\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = event.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        this.setState({ [name]: value });\r\n        console.log(`${name} element was clicked and this is the value ${value}`)\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        alert(`Welcome ${this.state.userName}`)\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    addNum(event) {\r\n        event.preventDefault();\r\n        alert(`${this.state.numOne} + ${this.state.numTwo} equals ${Number(this.state.numOne) + Number(this.state.numTwo)}`)\r\n    }\r\n\r\n\r\n    render() {\r\n        const numInput = {\r\n            display: 'block',\r\n            margin: '.6rem 0',\r\n            padding: '.4rem .2rem .4rem 3rem',\r\n            border: '1px solid #000',\r\n            fontWeight: 'inherit',\r\n\r\n        }\r\n\r\n        const btnStyle = {\r\n           color: '#fff',\r\n            backgroundColor: '#000',\r\n            padding: '.5rem 2rem',\r\n            margin: '.6rem 0',\r\n            borderRadius: 0,\r\n            fontWeight: 'inherit',\r\n        }\r\n\r\n        const formStyle = {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            background: '#FFAC00',\r\n            width: '20rem',\r\n            margin: '0 auto',\r\n            padding: '2rem 1rem',\r\n            borderRadius: '1.4rem',\r\n            boxShadow: '0px 5px 8px -1px rgba(0,0,0,0.51)',\r\n        }\r\n\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit} style={formStyle}>\r\n                <Modal />\r\n                <label htmlFor=\"numOne\" >\r\n                    <input type=\"number\" style={numInput} value={this.state.numOne} onChange={this.handleChange} id=\"numOne\" placeholder=\"Enter number\" name=\"numOne\" />\r\n                </label>\r\n                <label htmlFor=\"numTwo\" >\r\n                    <input type=\"number\" style={numInput} value={this.state.numTwo} onChange={this.handleChange} id=\"numTwo\" placeholder=\"Enter number\" name=\"numTwo\" />\r\n                </label>\r\n                <div>\r\n                    <label htmlFor=\"sum\">\r\n                        Sum: {`${this.state.numOne} + ${this.state.numTwo} equals ${Number(this.state.numOne) + Number(this.state.numTwo)}`}\r\n\r\n                    </label>\r\n                </div>\r\n                <button onClick={this.addNum}  className=\"btn\" type=\"button\" style={btnStyle}>Click to add</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form'\n\nclass App extends Component {\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n // eslint-disable-next-line\nimport $ from 'jquery';\n // eslint-disable-next-line\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}